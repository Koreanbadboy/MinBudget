@page "/Overview"
@inject BudgetManager BudgetManager

<!-- Översikt inkomster -->
<h3>Översikt inkomster</h3>
@if (BudgetManager.Incomes.Count == 0)
{
    <!-- Visar meddelande om inga inkomster finns -->
    <p>Inga inkomster registrerade.</p>
}
else
{
    <!-- Tabell för inkomster -->
    <table style="width: 100%; max-width: 500px; margin-top: 12px; border-collapse: collapse;">
        <thead>
            <tr style="background: #e0f7fa;">
                <!-- Klickbara rubriker för sortering -->
                <th style="text-align: left; padding: 8px; cursor: pointer;" @onclick="() => SortIncomeBy(nameof(Income.Category))">Kategori</th>
                <th style="text-align: left; padding: 8px; cursor: pointer;" @onclick="() => SortIncomeBy(nameof(Income.Description))">Notering</th>
                <th style="text-align: right; padding: 8px; cursor: pointer;" @onclick="() => SortIncomeBy(nameof(Income.Amount))">Belopp</th>
                <th style="padding: 8px;">Ta bort</th>
            </tr>
        </thead>
        <tbody>
            <!-- Itererar över sorterade inkomster -->
            @for (int i = 0; i < SortedIncomes.Count; i++)
            {
                var income = SortedIncomes[i];
                var index = BudgetManager.Incomes.IndexOf(income); // Behåll originalindex för redigering/ta bort
                <tr style="border-bottom: 1px solid #eee;">
                    <!-- Kategori -->
                    <td style="padding: 8px;">
                        @if (editingIndexIncome == index)
                        {
                            <!-- Redigeringsläge för kategori -->
                            <InputSelect @bind-Value="editingIncomeCategory" style="width: 100px;">
                                @foreach (var cat in incomeCategories)
                                {
                                    <option value="@cat">@cat</option>
                                }
                            </InputSelect>
                        }
                        else
                        {
                            <!-- Visningsläge för kategori -->
                            <span @onclick="() => EditIncomeNote(index)" style="cursor: pointer;">@income.Category</span>
                        }
                    </td>
                    <!-- Notering -->
                    <td style="padding: 8px;">
                        @if (editingIndexIncome == index)
                        {
                            <!-- Redigeringsläge för notering -->
                            <InputText @bind-Value="editingIncomeDescription" style="width: 100%;" />
                        }
                        else
                        {
                            <!-- Visningsläge för notering -->
                            <span @onclick="() => EditIncomeNote(index)" style="cursor: pointer; color: @(string.IsNullOrWhiteSpace(income.Description) ? "#aaa" : "inherit");">
                                @(string.IsNullOrWhiteSpace(income.Description) ? "Lägg till notering" : income.Description)
                            </span>
                        }
                    </td>
                    <!-- Belopp -->
                    <td style="padding: 8px; text-align: right;">
                        @if (editingIndexIncome == index)
                        {
                            <!-- Redigeringsläge för belopp -->
                            <InputNumber @bind-Value="editingIncomeAmount" style="width: 80px; text-align: right;" />
                        }
                        else
                        {
                            <!-- Visningsläge för belopp -->
                            <span @onclick="() => EditIncomeNote(index)" style="cursor: pointer;">@income.Amount kr</span>
                        }
                    </td>
                    <!-- Ta bort/Spara/Avbryt-knappar -->
                    <td style="padding: 8px; text-align: center;">
                        @if (editingIndexIncome == index)
                        {
                            <!-- Spara och avbryt vid redigering -->
                            <button @onclick="async () => await SaveIncomeNote(index)" style="margin-top: 4px; background: #e0f7fa; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Spara</button>
                            <button @onclick="CancelIncomeEdit" style="margin-top: 4px; margin-left: 4px; background: #eee; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Avbryt</button>
                        }
                        else
                        {
                            <!-- Ta bort-knapp -->
                            <button @onclick="async () => await RemoveIncome(index)" style="background: #ccefff; border: none; border-radius: 4px; padding: 4px 10px; cursor: pointer;">Ta bort</button>
                        }
                    </td>
                </tr>
            }
            <!-- Tom rad för att lägga till ny inkomst -->
            <tr style="border-bottom: 1px solid #eee; background: #f4fcff;">
                @if (addingIncome)
                {
                    <!-- Inmatningsfält för ny inkomst -->
                    <td style="padding: 8px;">
                        <InputSelect @bind-Value="newIncomeCategory" style="width: 100px;">
                            @foreach (var cat in incomeCategories)
                            {
                                <option value="@cat">@cat</option>
                            }
                        </InputSelect>
                    </td>
                    <td style="padding: 8px;">
                        <InputText @bind-Value="newIncomeDescription" style="width: 100%;" />
                    </td>
                    <td style="padding: 8px; text-align: right;">
                        <InputNumber @bind-Value="newIncomeAmount" style="width: 80px; text-align: right;" />
                    </td>
                    <td style="padding: 8px; text-align: center;">
                        <button @onclick="async () => await AddIncome()" style="background: #e0f7fa; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Spara</button>
                        <button @onclick="CancelAddIncome" style="margin-left: 4px; background: #eee; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Avbryt</button>
                    </td>
                }
                else
                {
                    <!-- Plustecken för att lägga till ny inkomst -->
                    <td colspan="4" style="padding: 8px; text-align: center; color: #aaa; cursor: pointer; background: #f4fcff; font-size: 24px;" @onclick="ShowAddIncome">+</td>
                }
            </tr>
        </tbody>
    </table>
}

<!-- Översikt utgifter -->
<h3 style="margin-top: 32px;">Översikt utgifter</h3>
@if (BudgetManager.Expenses.Count == 0)
{
    <!-- Visar meddelande om inga utgifter finns -->
    <p>Inga utgifter registrerade.</p>
}
else
{
    <!-- Tabell för utgifter -->
    <table style="width: 100%; max-width: 500px; margin-top: 12px; border-collapse: collapse;">
        <thead>
            <tr style="background: #f0f0f0;">
                <!-- Klickbara rubriker för sortering -->
                <th style="text-align: left; padding: 8px; cursor: pointer;" @onclick="() => SortExpenseBy(nameof(Expense.Category))">Kategori</th>
                <th style="text-align: left; padding: 8px; cursor: pointer;" @onclick="() => SortExpenseBy(nameof(Expense.Description))">Notering</th>
                <th style="text-align: right; padding: 8px; cursor: pointer;" @onclick="() => SortExpenseBy(nameof(Expense.Amount))">Belopp</th>
                <th style="padding: 8px;">Ta bort</th>
            </tr>
        </thead>
        <tbody>
            <!-- Itererar över sorterade utgifter -->
            @for (int i = 0; i < SortedExpenses.Count; i++)
            {
                var expense = SortedExpenses[i];
                var index = BudgetManager.Expenses.IndexOf(expense); // Behåll originalindex för redigering/ta bort
                <tr style="border-bottom: 1px solid #eee;">
                    <!-- Kategori -->
                    <td style="padding: 8px;">
                        @if (editingIndexExpense == index)
                        {
                            <!-- Redigeringsläge för kategori -->
                            <InputSelect @bind-Value="editingExpenseCategory" style="width: 100px;">
                                @foreach (var cat in expenseCategories)
                                {
                                    <option value="@cat">@cat</option>
                                }
                            </InputSelect>
                        }
                        else
                        {
                            <!-- Visningsläge för kategori -->
                            <span @onclick="() => EditExpenseNote(index)" style="cursor: pointer;">@expense.Category</span>
                        }
                    </td>
                    <!-- Notering -->
                    <td style="padding: 8px;">
                        @if (editingIndexExpense == index)
                        {
                            <!-- Redigeringsläge för notering -->
                            <InputText @bind-Value="editingExpenseDescription" style="width: 100%;" />
                        }
                        else
                        {
                            <!-- Visningsläge för notering -->
                            <span @onclick="() => EditExpenseNote(index)" style="cursor: pointer; color: @(string.IsNullOrWhiteSpace(expense.Description) ? "#aaa" : "inherit");">
                                @(string.IsNullOrWhiteSpace(expense.Description) ? "Lägg till notering" : expense.Description)
                            </span>
                        }
                    </td>
                    <!-- Belopp -->
                    <td style="padding: 8px; text-align: right;">
                        @if (editingIndexExpense == index)
                        {
                            <!-- Redigeringsläge för belopp -->
                            <InputNumber @bind-Value="editingExpenseAmount" style="width: 80px; text-align: right;" />
                        }
                        else
                        {
                            <!-- Visningsläge för belopp -->
                            <span @onclick="() => EditExpenseNote(index)" style="cursor: pointer;">@expense.Amount kr</span>
                        }
                    </td>
                    <!-- Ta bort/Spara/Avbryt-knappar -->
                    <td style="padding: 8px; text-align: center;">
                        @if (editingIndexExpense == index)
                        {
                            <!-- Spara och avbryt vid redigering -->
                            <button @onclick="async () => await SaveExpenseNote(index)" style="margin-top: 4px; background: #f0f0f0; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Spara</button>
                            <button @onclick="CancelExpenseEdit" style="margin-top: 4px; margin-left: 4px; background: #eee; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Avbryt</button>
                        }
                        else
                        {
                            <!-- Ta bort-knapp -->
                            <button @onclick="async () => await RemoveExpense(index)" style="background: #ffcccc; border: none; border-radius: 4px; padding: 4px 10px; cursor: pointer;">Ta bort</button>
                        }
                    </td>
                </tr>
            }
            <!-- Tom rad för att lägga till ny utgift -->
            <tr style="border-bottom: 1px solid #eee; background: #fff8f8;">
                @if (addingExpense)
                {
                    <!-- Inmatningsfält för ny utgift -->
                    <td style="padding: 8px;">
                        <InputSelect @bind-Value="newExpenseCategory" style="width: 100px;">
                            @foreach (var cat in expenseCategories)
                            {
                                <option value="@cat">@cat</option>
                            }
                        </InputSelect>
                    </td>
                    <td style="padding: 8px;">
                        <InputText @bind-Value="newExpenseDescription" style="width: 100%;" />
                    </td>
                    <td style="padding: 8px; text-align: right;">
                        <InputNumber @bind-Value="newExpenseAmount" style="width: 80px; text-align: right;" />
                    </td>
                    <td style="padding: 8px; text-align: center;">
                        <button @onclick="async () => await AddExpense()" style="background: #f0f0f0; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Spara</button>
                        <button @onclick="CancelAddExpense" style="margin-left: 4px; background: #eee; border: none; border-radius: 4px; padding: 2px 8px; cursor: pointer;">Avbryt</button>
                    </td>
                }
                else
                {
                    <!-- Plustecken för att lägga till ny utgift -->
                    <td colspan="4" style="padding: 8px; text-align: center; color: #aaa; cursor: pointer; background: #fff8f8; font-size: 24px;" @onclick="ShowAddExpense">+</td>
                }
            </tr>
        </tbody>
    </table>
}

@code {
    // Sorteringsfält och riktning för inkomster
    private string incomeSortField = nameof(Income.Category);
    private bool incomeSortAsc = true;
    // Sorteringsfält och riktning för utgifter
    private string expenseSortField = nameof(Expense.Category);
    private bool expenseSortAsc = true;

    // Returnerar sorterad lista för inkomster
    private List<Income> SortedIncomes => SortIncomes();
    // Returnerar sorterad lista för utgifter
    private List<Expense> SortedExpenses => SortExpenses();

    // Sorterar inkomster
    private List<Income> SortIncomes()
    {
        var list = BudgetManager.Incomes.ToList();
        switch (incomeSortField)
        {
            case nameof(Income.Category):
                list = incomeSortAsc ? list.OrderBy(x => x.Category).ToList() : list.OrderByDescending(x => x.Category).ToList();
                break;
            case nameof(Income.Description):
                list = incomeSortAsc ? list.OrderBy(x => x.Description).ToList() : list.OrderByDescending(x => x.Description).ToList();
                break;
            case nameof(Income.Amount):
                list = incomeSortAsc ? list.OrderBy(x => x.Amount).ToList() : list.OrderByDescending(x => x.Amount).ToList();
                break;
        }
        return list;
    }
    // Sorterar utgifter
    private List<Expense> SortExpenses()
    {
        var list = BudgetManager.Expenses.ToList();
        switch (expenseSortField)
        {
            case nameof(Expense.Category):
                list = expenseSortAsc ? list.OrderBy(x => x.Category).ToList() : list.OrderByDescending(x => x.Category).ToList();
                break;
            case nameof(Expense.Description):
                list = expenseSortAsc ? list.OrderBy(x => x.Description).ToList() : list.OrderByDescending(x => x.Description).ToList();
                break;
            case nameof(Expense.Amount):
                list = expenseSortAsc ? list.OrderBy(x => x.Amount).ToList() : list.OrderByDescending(x => x.Amount).ToList();
                break;
        }
        return list;
    }
    // Hanterar klick på rubrik för inkomster
    private void SortIncomeBy(string field)
    {
        if (incomeSortField == field)
            incomeSortAsc = !incomeSortAsc;
        else
        {
            incomeSortField = field;
            incomeSortAsc = true;
        }
    }
    // Hanterar klick på rubrik för utgifter
    private void SortExpenseBy(string field)
    {
        if (expenseSortField == field)
            expenseSortAsc = !expenseSortAsc;
        else
        {
            expenseSortField = field;
            expenseSortAsc = true;
        }
    }

    // Index för redigering av inkomst
    private int editingIndexIncome = -1;
    // Index för redigering av utgift
    private int editingIndexExpense = -1;
    // Redigeringsfält för inkomst
    private string? editingIncomeDescription;
    private decimal? editingIncomeAmount;
    private string editingIncomeCategory = "Lön";
    // Redigeringsfält för utgift
    private string? editingExpenseDescription;
    private decimal? editingExpenseAmount;
    private string editingExpenseCategory = "Mat";
    // Kategorier för inkomst och utgift
    private readonly string[] incomeCategories = { "Lön", "CSN" };
    private readonly string[] expenseCategories = { "Mat", "Hyra", "Nöje", "Transport", "Övrigt", "Spara" };

    // Fält för ny inkomst
    private string newIncomeCategory = "Lön";
    private string? newIncomeDescription;
    private decimal? newIncomeAmount;
    private bool addingIncome = false;
    // Fält för ny utgift
    private string newExpenseCategory = "Mat";
    private string? newExpenseDescription;
    private decimal? newExpenseAmount;
    private bool addingExpense = false;

    // Laddar data vid initiering
    protected override async Task OnInitializedAsync()
    {
        await BudgetManager.LoadAsync();
    }

    // Laddar data vid parameterändring
    protected override async Task OnParametersSetAsync()
    {
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }

    // Visar inmatningsfält för ny inkomst
    private void ShowAddIncome()
    {
        addingIncome = true;
        newIncomeCategory = "Lön";
        newIncomeDescription = null;
        newIncomeAmount = null;
    }
    // Avbryter inmatning av ny inkomst
    private void CancelAddIncome()
    {
        addingIncome = false;
        newIncomeCategory = "Lön";
        newIncomeDescription = null;
        newIncomeAmount = null;
    }
    // Lägger till ny inkomst
    private async Task AddIncome()
    {
        if (newIncomeAmount.HasValue && newIncomeAmount.Value > 0)
        {
            var income = new Income
            {
                Category = newIncomeCategory,
                Amount = newIncomeAmount.Value,
                Description = newIncomeDescription
            };
            await BudgetManager.AddIncomeAsync(income);
            newIncomeCategory = "Lön";
            newIncomeDescription = null;
            newIncomeAmount = null;
            addingIncome = false;
            await BudgetManager.LoadAsync();
            StateHasChanged();
        }
    }
    // Visar inmatningsfält för ny utgift
    private void ShowAddExpense()
    {
        addingExpense = true;
        newExpenseCategory = "Mat";
        newExpenseDescription = null;
        newExpenseAmount = null;
    }
    // Avbryter inmatning av ny utgift
    private void CancelAddExpense()
    {
        addingExpense = false;
        newExpenseCategory = "Mat";
        newExpenseDescription = null;
        newExpenseAmount = null;
    }
    // Lägger till ny utgift
    private async Task AddExpense()
    {
        if (newExpenseAmount.HasValue && newExpenseAmount.Value > 0)
        {
            var expense = new Expense
            {
                Category = newExpenseCategory,
                Amount = newExpenseAmount.Value,
                Description = newExpenseDescription
            };
            await BudgetManager.AddExpenseAsync(expense);
            newExpenseCategory = "Mat";
            newExpenseDescription = null;
            newExpenseAmount = null;
            addingExpense = false;
            await BudgetManager.LoadAsync();
            StateHasChanged();
        }
    }
    // Tar bort inkomst
    private async Task RemoveIncome(int index)
    {
        await BudgetManager.RemoveIncomeAsync(index);
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }

    // Tar bort utgift
    private async Task RemoveExpense(int index)
    {
        await BudgetManager.RemoveExpenseAsync(index);
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }

    // Sätter redigeringsläge för inkomst
    private void EditIncomeNote(int index)
    {
        editingIndexIncome = index;
        var income = BudgetManager.Incomes[index];
        editingIncomeDescription = income.Description;
        editingIncomeAmount = income.Amount;
        editingIncomeCategory = income.Category;
    }
    // Sparar redigerad inkomst
    private async Task SaveIncomeNote(int index)
    {
        var income = BudgetManager.Incomes[index];
        income.Description = editingIncomeDescription;
        income.Amount = editingIncomeAmount ?? 0;
        income.Category = editingIncomeCategory;
        await BudgetManager.SaveIncomeNoteAsync(index);
        editingIndexIncome = -1;
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }
    // Avbryter redigering av inkomst
    private void CancelIncomeEdit()
    {
        editingIndexIncome = -1;
    }

    // Sätter redigeringsläge för utgift
    private void EditExpenseNote(int index)
    {
        editingIndexExpense = index;
        var expense = BudgetManager.Expenses[index];
        editingExpenseDescription = expense.Description;
        editingExpenseAmount = expense.Amount;
        editingExpenseCategory = expense.Category;
    }
    // Sparar redigerad utgift
    private async Task SaveExpenseNote(int index)
    {
        var expense = BudgetManager.Expenses[index];
        expense.Description = editingExpenseDescription;
        expense.Amount = editingExpenseAmount ?? 0;
        expense.Category = editingExpenseCategory;
        await BudgetManager.SaveExpenseNoteAsync(index);
        editingIndexExpense = -1;
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }
    // Avbryter redigering av utgift
    private void CancelExpenseEdit()
    {
        editingIndexExpense = -1;
    }
}
