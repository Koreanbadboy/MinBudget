@page "/"

@inject IJSRuntime Js
@inject BudgetManager BudgetManager

<PageTitle>Home</PageTitle>

<p style="text-align: left; font-family: Arial, sans-serif; font-size: 48px; margin-left: 12px;">MinBudget+</p> <!-- Ändring: vänsterställd rubrik -->

@{
    var incomeTotal   = BudgetManager.TotalIncome();
    var expenseTotal  = BudgetManager.TotalExpense();
    var leftThisMonth = BudgetManager.LeftThisMonth();
}

<!-- Kvar denna månad RUTA -->
<div style="width: 400px; height: 200px; background-color: lightgreen;
            display: flex; flex-direction: column; justify-content: center;
            align-items: center; margin: 12px 0; margin-left: 12px; border: 1px solid #b2d8b2; border-radius: 8px;"> <!-- Ångra: mildare färg och border -->
    <p style="font-size: 28px; margin: 0; color: black;">Kvar denna månad</p>
    <p style="font-size: 32px; font-weight: bold; margin: 0; color: black;">@leftThisMonth kr</p>
</div>

<!-- Inkomst och Utgift bredvid varandra -->
<div style="display: flex; flex-direction: row; gap: 16px; margin-left: 12px;"> <!-- Ändring: flex-rad -->
    <!-- Inkomst-box -->
    <div style="width: 190px; height: 200px; background-color: lightblue;
                display: flex; flex-direction: column; justify-content: center;
                align-items: center; border: 1px solid #b2d8b2; border-radius: 8px;">
        <p style="font-size: 28px; margin: 0; color: black;">Inkomst</p>
        <p style="font-size: 32px; font-weight: bold; margin: 0; color: black;">@incomeTotal kr</p>
    </div>

    <!-- Utgift-box -->
    <div style="width: 190px; height: 200px; background-color: lightcoral;
                display: flex; flex-direction: column; justify-content: center;
                align-items: center; border: 1px solid #d8b2b2; border-radius: 8px;">
        <p style="font-size: 28px; margin: 0; color: black;">Utgifter</p>
        <p style="font-size: 32px; font-weight: bold; margin: 0; color: black;">@expenseTotal kr</p>
    </div>
</div>

<!-- Form för inkomst + knapp (box) -->
<div style="width: 400px; background-color: #eaffea; border: 1px solid #b2d8b2; border-radius: 8px; padding: 16px; margin: 12px 0; margin-left: 12px; display: flex; flex-direction: column; align-items: center;"> <!-- Ångra: mildare färg och border -->
    <EditForm Model="_incomeModel" OnValidSubmit="AddIncomeAsync">
        <div style="display: flex; flex-direction: row; gap: 6px; align-items: center;">
            <button type="submit">➕</button>
            <InputNumber @bind-Value="_incomeModel.Value" placeholder="Lägg till inkomst..." />
        </div>
    </EditForm>
</div>

<!-- Lista med inkomster (box) -->
@if (BudgetManager.Incomes.Count > 0)
{
    <div style="width: 400px; background-color: #eaffea; border: 1px solid #b2d8b2; border-radius: 8px; padding: 16px; margin: 12px 0; margin-left: 12px; display: flex; flex-direction: column; align-items: center;"> <!-- Ångra: mildare färg och border -->
        <h4 style="text-align: center; color: black;">Inkomster</h4>
        <ul style="width: 100%; padding-left: 0;">
            @foreach (var item in BudgetManager.Incomes.Select((income, idx) => new { income, idx }))
            {
                <li style="list-style: none; display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 4px;">
                    <span style="color: black; font-weight: bold;">@item.income.Amount kr</span>
                    <button @onclick="async () => await RemoveIncome(item.idx)">Ta bort</button>
                </li>
            }
        </ul>
    </div>
}

<!-- Form för utgifter + knapp (box) -->
<div style="width: 400px; background-color: #ffeaea; border: 1px solid #d8b2b2; border-radius: 8px; padding: 16px; margin: 12px 0; margin-left: 12px; display: flex; flex-direction: column; align-items: center;"> <!-- Ångra: mildare färg och border -->
    <EditForm Model="_expenseModel" OnValidSubmit="AddExpenseAsync">
        <div style="display: flex; flex-direction: row; gap: 6px; align-items: center;">
            <button type="submit">➕</button>
            <InputNumber @bind-Value="_expenseModel.Value" placeholder="Lägg till utgifter..." />
        </div>
    </EditForm>
</div>

<!-- Lista med utgifter (box) -->
@if (BudgetManager.Expenses.Count > 0)
{
    <div style="width: 400px; background-color: #ffeaea; border: 1px solid #d8b2b2; border-radius: 8px; padding: 16px; margin: 12px 0; margin-left: 12px; display: flex; flex-direction: column; align-items: center;"> <!-- Ångra: mildare färg och border -->
        <h4 style="text-align: center; color: black;">Utgifter</h4>
        <ul style="width: 100%; padding-left: 0;">
            @foreach (var item in BudgetManager.Expenses.Select((expense, idx) => new { expense, idx }))
            {
                <li style="list-style: none; display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 4px;">
                    <span style="color: black; font-weight: bold;">@item.expense.Amount kr</span>
                    <button @onclick="async () => await RemoveExpense(item.idx)">Ta bort</button>
                </li>
            }
        </ul>
    </div>
}

@code {
    // Input-modeller kan ligga kvar här
    public class IncomeInputModel { public decimal? Value { get; set; } }
    public class ExpenseInputModel { public decimal? Value { get; set; } }

    private IncomeInputModel _incomeModel = new();
    private ExpenseInputModel _expenseModel = new();

    protected override async Task OnInitializedAsync()
    {
        await BudgetManager.LoadAsync();
    }

    // Ändring: UI-anrop, logik ligger nu i BudgetManager
    private async Task AddIncomeAsync()
    {
        if (_incomeModel.Value is > 0)
        {
            await BudgetManager.AddIncomeAsync(new Income { Amount = _incomeModel.Value.Value });
            _incomeModel.Value = null;
            await BudgetManager.LoadAsync(); // laddar om data
            StateHasChanged();
        }
    }

    private async Task AddExpenseAsync()
    {
        if (_expenseModel.Value is > 0)
        {
            await BudgetManager.AddExpenseAsync(new Expense { Amount = _expenseModel.Value.Value });
            _expenseModel.Value = null;
            await BudgetManager.LoadAsync(); // laddar om data
            StateHasChanged();
        }
    }

    // Ändring: UI-anrop, logik ligger nu i BudgetManager
    private async Task RemoveIncome(int index)
    {
        await BudgetManager.RemoveIncomeAsync(index);
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }

    private async Task RemoveExpense(int index)
    {
        await BudgetManager.RemoveExpenseAsync(index);
        await BudgetManager.LoadAsync();
        StateHasChanged();
    }
    // Kommentar: All logik för datahantering ligger nu i BudgetManager
}
